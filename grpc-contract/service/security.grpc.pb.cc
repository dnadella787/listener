// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/security.proto

#include "service/security.pb.h"
#include "service/security.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace service {

static const char* SecurityService_method_names[] = {
  "/service.SecurityService/GetSecurity",
  "/service.SecurityService/ListSecurities",
};

std::unique_ptr< SecurityService::Stub> SecurityService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SecurityService::Stub> stub(new SecurityService::Stub(channel, options));
  return stub;
}

SecurityService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSecurity_(SecurityService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSecurities_(SecurityService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SecurityService::Stub::GetSecurity(::grpc::ClientContext* context, const ::service::GetSecurityRequest& request, ::service::GetSecurityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::service::GetSecurityRequest, ::service::GetSecurityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSecurity_, context, request, response);
}

void SecurityService::Stub::async::GetSecurity(::grpc::ClientContext* context, const ::service::GetSecurityRequest* request, ::service::GetSecurityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::service::GetSecurityRequest, ::service::GetSecurityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSecurity_, context, request, response, std::move(f));
}

void SecurityService::Stub::async::GetSecurity(::grpc::ClientContext* context, const ::service::GetSecurityRequest* request, ::service::GetSecurityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSecurity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service::GetSecurityResponse>* SecurityService::Stub::PrepareAsyncGetSecurityRaw(::grpc::ClientContext* context, const ::service::GetSecurityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::service::GetSecurityResponse, ::service::GetSecurityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSecurity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::service::GetSecurityResponse>* SecurityService::Stub::AsyncGetSecurityRaw(::grpc::ClientContext* context, const ::service::GetSecurityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSecurityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SecurityService::Stub::ListSecurities(::grpc::ClientContext* context, const ::service::ListSecuritiesRequest& request, ::service::ListSecuritiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::service::ListSecuritiesRequest, ::service::ListSecuritiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSecurities_, context, request, response);
}

void SecurityService::Stub::async::ListSecurities(::grpc::ClientContext* context, const ::service::ListSecuritiesRequest* request, ::service::ListSecuritiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::service::ListSecuritiesRequest, ::service::ListSecuritiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSecurities_, context, request, response, std::move(f));
}

void SecurityService::Stub::async::ListSecurities(::grpc::ClientContext* context, const ::service::ListSecuritiesRequest* request, ::service::ListSecuritiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSecurities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::service::ListSecuritiesResponse>* SecurityService::Stub::PrepareAsyncListSecuritiesRaw(::grpc::ClientContext* context, const ::service::ListSecuritiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::service::ListSecuritiesResponse, ::service::ListSecuritiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSecurities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::service::ListSecuritiesResponse>* SecurityService::Stub::AsyncListSecuritiesRaw(::grpc::ClientContext* context, const ::service::ListSecuritiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSecuritiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

SecurityService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SecurityService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SecurityService::Service, ::service::GetSecurityRequest, ::service::GetSecurityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SecurityService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service::GetSecurityRequest* req,
             ::service::GetSecurityResponse* resp) {
               return service->GetSecurity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SecurityService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SecurityService::Service, ::service::ListSecuritiesRequest, ::service::ListSecuritiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SecurityService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::service::ListSecuritiesRequest* req,
             ::service::ListSecuritiesResponse* resp) {
               return service->ListSecurities(ctx, req, resp);
             }, this)));
}

SecurityService::Service::~Service() {
}

::grpc::Status SecurityService::Service::GetSecurity(::grpc::ServerContext* context, const ::service::GetSecurityRequest* request, ::service::GetSecurityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SecurityService::Service::ListSecurities(::grpc::ServerContext* context, const ::service::ListSecuritiesRequest* request, ::service::ListSecuritiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace service
#include <grpcpp/ports_undef.inc>

